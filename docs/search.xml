<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>go语言内存分析 5/119</title>
      <link href="/2022/02/17/go-nei-cun/"/>
      <url>/2022/02/17/go-nei-cun/</url>
      
        <content type="html"><![CDATA[<h2 id="go语言内存分析"><a href="#go语言内存分析" class="headerlink" title="go语言内存分析"></a>go语言内存分析</h2><p>最新看了一下go语言，感觉语言设计的比Java要好一些，底层实现了对并发的支持。<br>他的内存结构和内存回收跟Java的模型也有很大的不同，抽空写一下go语言的内存分析，后续也会写一篇G1和GMS用来坐对比。<br>（待续）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx使用try_files配置vue 4/119</title>
      <link href="/2022/02/16/nginx/"/>
      <url>/2022/02/16/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="nginx使用try-files配置vue"><a href="#nginx使用try-files配置vue" class="headerlink" title="nginx使用try_files配置vue"></a>nginx使用try_files配置vue</h2><p>组内的小伙伴最近独立开发的一个项目，前端使用VUE，路由模式使用history。<br>部署时发现无法访问，自己研究半天后，无法解决，向我寻求帮助，发现是他的nginx配置错误</p><p>其实 vue router 的文档里有部署方式，<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B">https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B</a><br>服务器配置示例：<br>location / {<br>  try_files $uri $uri/ /index.html;<br>}</p><p>随手写篇文章记录一下，nginx的location下的配置中<br>root，alias，try_files 区别，未来有时间可以写一篇nginx的深入文章，包含负载均衡、双机热备、缓存等高级功能。</p><p>root:<br>location /test/ {<br>    root /var/www/image<br>}<br>若按照上述配置的话，访问/test目录里面的文件时, nginx会自动去/var/www/image/test去找。</p><p>alias:<br>location /test/ {<br> alias /var/www/image/<br>}<br>若按照上述配置的话，访问/img目录里面的文件时, nginx会自动去/var/www/image目录找文件, 也就是不会把后缀带上，常用来配置静态文件。</p><p>try_files:<br>location /test/ {<br>  try_files $uri $uri/ /index.html;<br>}<br>try_files 会到硬盘里尝试找这个文件, 找不到，就会 fall back 到 try_files 的最后一个选项index.html,将请求转发返回index.html上，然后html里的vue router再去跟去后缀路由对应的页面。</p><p>至此，完成history的转发。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>119行动</title>
      <link href="/2022/02/16/hello-world/"/>
      <url>/2022/02/16/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>我打算开始写博客，今天是2021年11月9号。我称之为119行动。</p><p>119，一方面因为今天是11月9号开始时间，另一方面也表示这个事情对我像火灾一样比较紧迫。</p><p>github是我主发的地方，抽空会将文章同步到个人公众号、CSDN等等各个平台。</p><p>119行动的内容包含：<br>1，每周写一篇博客。<br>2，至少每2天跑一次3公里。<br>3，每天做一道code题目。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>升级win11后 3/119</title>
      <link href="/2022/02/11/win11/"/>
      <url>/2022/02/11/win11/</url>
      
        <content type="html"><![CDATA[<h2 id="升级成了WIN11"><a href="#升级成了WIN11" class="headerlink" title="升级成了WIN11"></a>升级成了WIN11</h2><p>年前公司给换了笔记本电脑，之前在公司一直用的是MACP15款。个人是更偏向苹果系统的，但是无奈老机子太卡了。<br>申请换电脑时，只能申请win笔记本了。拿到手后是win10，自己下载升级成了win11。</p><p>刚用11时，感觉很惊喜，跟MAC用起来很像，又能解决MAC的一些老软件兼容性问题，虽然小BUG比较多。</p><p>写一个系统的问题和小技巧吧，会持续更新这个文章</p><p>1，在执行shell命令时，报在此系统上禁止运行脚本。</p><p>解决方案，管理员身份 打开终端，执行 set-ExecutionPolicy RemoteSigned 解决</p><p>2，可以直接下载Linux，在应用市场搜索ubuntu。</p><p>3，如果下载视频是ev4加密视频的话，建议购买使用正版命令打开。（临时需要可以找我破解，python解密）</p><p>4，自带粘贴板记录功能 win + v 打开</p><p>5，自带多功能截图 win + shift + s </p><p>6，带多桌面功能，触控板可以设置的跟MAC一样。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>线上OOM分析 2/119</title>
      <link href="/2021/11/19/midoom/"/>
      <url>/2021/11/19/midoom/</url>
      
        <content type="html"><![CDATA[<h2 id="记一次mybatis引起的线上OOM"><a href="#记一次mybatis引起的线上OOM" class="headerlink" title="记一次mybatis引起的线上OOM"></a>记一次mybatis引起的线上OOM</h2><p>最近在忙着加班+找房换租的窝，所有很久没写博客，社畜的艰苦生活，哈哈</p><p>言归正传，最近线上一个小项目，出现了特殊的OOM情况，很有意思，所以跟大家分享一下</p><h3 id="奇特的内存溢出现象"><a href="#奇特的内存溢出现象" class="headerlink" title="奇特的内存溢出现象"></a>奇特的内存溢出现象</h3><h4 id="项目背景："><a href="#项目背景：" class="headerlink" title="项目背景："></a>项目背景：</h4><p>公司有某个线下零售业务部门，有POS一千台左右，业务和门店还在持续扩张中。业务现有的CRM和POS修改起来较为困难(全为供应商标准系统)。<br>业务有个中间件，用于接受POS的一个结账前的会员信息请求，转发到SRM系统获取基础信息后，然后查数据库表做数据加工后再返回POS，以此来做双方系统的自定义配置。(个人不认可这种方案)<br>这个小项目是由我们组的一个小伙伴完成开发，压测完成后部署在阿里云上，2台ECS做了负载均衡。</p><h4 id="溢出现场"><a href="#溢出现场" class="headerlink" title="溢出现场:"></a>溢出现场:</h4><p>项目上线后，间隔一段时间后，用户反馈POS有些门店请求报错。上服务器查询日志发现报了内存溢出，项目已经被守护进程自动重启，无法查看溢出时内存具体成分。查看代码报错，是请求导致的OOM报错。结合之前的日志分析发现，崩溃前已经发生多次内存无法回收的异常。查看ECS的监控，发现内存是缓慢上升的。断定发生了内存泄漏。<br>监控了一段时间后，发现被重启后应用，内存依旧在缓慢上升。并发高发时间段是在晚上7-8点，而内存溢出发生在晚上9点多。所以也并不是并发引起的。思考这种内存无法释放的缓慢OOM，单靠增加内存或者JVM调优是很难解决的，应该是小伙伴的代码中有对象没有及时释放导致的，此时已经晚上十点多，门店已经关店，无法观察内存变化，而且之前压测也没有出现OOM。考虑有可能需要长压测来让内存缓慢累计，所有起了压测程序，参数并发调低，压测时间改为连续3小时。等待明早观察成果。</p><h3 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h3><p>早上发现内存回收正常，尝试分析内存内容。无法复现的异常，很难解决，尝试观察内存状况。<br>先用 jmap -histo 在服务器上查看哪些对象内存占用异常。<br>结果发现都是 char 并无异常。于是打开窗口连接2台服务器，持续监控2台机器的内存状况。同时打开代码，找寻可能异常点。<br>（最小化接着做其他的事情）<br>中午左右，观察到其中一台服务器内存持续上升。立刻将负载均衡全部切换到另一台上，保护现场防止再崩溃。<br>开始处理分析内存内容：<br>1，使用 jmap -histo 在服务器上查看内存中哪些对象异常。<br>发现除了 char map 这些基础类，还有 CurrentHashMap 占用很多。<br>CurrentHashMap ？ 采用了数组+链表+红黑树的实现方式来设计，内部大量采用CAS操作，是线程安全性的map，锁的颗粒度是到数组。因为该项目并不涉及到多线程，找寻项目代码果然没有这方面的引用。<br>2, 发现不能迅速定位，先保存下内存状态。使用 jmap -dump:format=b,file=文件名 [pid] 将内存数据导出成二进制文件。<br>下载下来后，重启服务，调回负载均衡。<br>3，使用 java 自带 VisualVM 来分析内存中的类及其引用。<br>发现大量的char和原始值引用指向CurrentHashMap，同时存在某个 entity 占用也过多。<br>这时想到 mybatis 源码是将数据映射成map，处理并发时应该会有CurrentHashMap。正好也和某个实例占用过多吻合。<br>打开 mybatis 源码发现在一级缓存和二级缓存，果然是使用 CurrentHashMap 来接收缓存的。<br>难道缓存没释放？<br>mybatis 一级缓存是SqlSession内的，二级缓存是基于namespace。如果是缓存没释放那我将二级缓存关闭试试。于是将二级缓存配置关闭。配置数据库请求超时时间后。<br>本地压测通过（之前压测就无法复现），打包发布至其中一台服务器，做个对比验证。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>以为问题已经解决，安心下班，晚上收到运维小伙伴反馈，服务器内存报警了。<br>–”，还是我新发布的那台。立刻上线查看，还是内存缓慢溢出。缓存已经关闭了，还是大量的引用指向CurrentHashMap？<br>这难道不是缓存引起的？那还有什么能够让CurrentHashMap撑爆内存？<br>没关系，已经定位到是mybatis的问题了，下面应该从SQL入手去看看，有没有什么SQL的异常。<br>看了对应namespace的sql，咦？这个sql写的有点怪，把id包在if判断里也正常，难道id也有可能不存在，如果id不存在，那这个sql就会变成全部查询？<br>那也会超时被断开呀？没怎么用过oracle，难道真的是这里？<br>戴着疑问，我让DBA把表发给我，oracle的自增id是DBA自己用触发器生成，但是真的会有业务数据没有id嘛？我跑了sql查了一下，真的！！！有极个别几个用户的在业务表id居然是null。<br>突然间豁然开朗，一切问题都能解释通了。<br>小伙伴代码有个基于id的查询，没有判断id是否为空（id还有为空的？算了不想吐槽了）。id传到mapper时，查询条件被过滤掉，形成了一个全表查询。<br>oracle的查询是流式缓慢吐出数据，所以照成内存缓慢增加，因为id为空是极个别现象所以照成了内存溢出是随机的现象。<br>mybatis 查询sql会先把值存在缓存里，所以分析内存时，发现缓存中的CurrentHashMap引用大量entity，占据内存不释放。</p><p>到此问题原因已经找到，于是在查询前，增加了一个id为空的判断，发布后监控内存状况。</p><p>第二天，果然没有再出现内存泄漏问题，于是问题解决（小伙伴和DBA关于id为空撕逼中）。</p><p>过程中忘了截图，没有图大家将就着看吧，过程中主要用到了jmap的相关命令、VisualVM内存分析、mybatis源码和自己敏锐的问题觉察能力</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo+GitHub 搭建博客 1/119</title>
      <link href="/2021/11/09/hexo/"/>
      <url>/2021/11/09/hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-GitHub-搭建博客"><a href="#hexo-GitHub-搭建博客" class="headerlink" title="hexo+GitHub 搭建博客"></a>hexo+GitHub 搭建博客</h2><p>基础环境：nodejs</p><p><em>本文用使用示例是github，同样的操作也可用于gitee，但我在实际操作的过程中发现gitee需要实名手持身份证拍照审核，觉得麻烦随之放弃</em></p><h3 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1, 新建仓库"></a>1, 新建仓库</h3><p>github上新建代码仓库，用来存储博客</p><p><img src="/images/githubNewKu.png" alt="githubNewKu.png" title="githubNew"></p><p>注意，项目名字使用 你的github名字加 <font color="red">.github.io</font> 后缀，比如我的GitHub名称是<a href="https://github.com/liu-xiaoran">liu-xiaoran</a>,n那么我的项目名字就是 liu-xiaoran.github.io 点击创建完成操作，注意不要勾选add Readme file 和其他选项，这个可以后续自行添加，空白的仓库库有助于git的第一次推送合并。</p><h3 id="2-配置博客访问"><a href="#2-配置博客访问" class="headerlink" title="2, 配置博客访问"></a>2, 配置博客访问</h3><p>跳转到刚刚新建仓库首页，也厚点击上方菜单栏的<font color="pink">Settings</font>,再点击左边栏位的<font color="pink">Pages</font>, 填写对应的pages设置。</p><p><img src="/images/setPage.png" alt="setPage.png" title="setPage"></p><p>Source 那里默认是 root, 点击选择Theme Chooser，选择一个主体，点击保存。<br>此时你通过填写的仓库名，如 liu-xiaoran.github.io 就可以访问到该博客地址。</p><h3 id="3-配置域名访问"><a href="#3-配置域名访问" class="headerlink" title="3, 配置域名访问"></a>3, 配置域名访问</h3><p>配置域名访问和配置https的方式，打开你的域名解析控制台，如我的阿里云域名配置页面。<br><img src="/images/DNS.png" alt="DNS.png" title="DNS"></p><p>配置CNAME，指向你的博客访问地址，如liu-xiaoran.github.io。</p><p>配置结束后，返回github的pages配置页面，填写上域名，自动生成CNAME文件，勾选启用https。保存后稍后即可使用域名访问博客。想使用GitHub自动博客功能的，到此处就可以结束了。</p><h3 id="3-安装使用hexo"><a href="#3-安装使用hexo" class="headerlink" title="3, 安装使用hexo"></a>3, 安装使用hexo</h3><p>打开终端输入</p><p><code>npm i hexo-cli -g</code></p><p>安装hexo, 拉取我们的github上的博客库，到本地。清空内部GitHub博客配置的文件。在文件夹内使用终端，输入</p><p><code>hexo init</code></p><p>初始化文件夹，接着使用 <code>npm i</code> 安装依赖。</p><p>这样hexo博客就配置好了，输入 <code>hexo g</code> 生成静态网页，然后输入 <code>hexo s</code> 打开本地服务器。可以写一个hello本地尝试一下。</p><h3 id="4，配置GitHub默认路径"><a href="#4，配置GitHub默认路径" class="headerlink" title="4，配置GitHub默认路径"></a>4，配置GitHub默认路径</h3><p>本地写完博文，推送到github时，发现通过域名访问的并不去hexo博客地址，怎么办？<br>仔细看我的步骤2里的红框内的，GitHub上的默认博客根目录是固定，只有几个值可以选择，这里选择一个自己喜欢的值，不是root,比如我选的 <font color="pink">docs</font> , 打开自己的hexo配置，_config.yml 将里面的public_dir值改成和GitHub选择的值一致，比如我的都是 <font color="pink">docs</font> 。</p><p><img src="/images/setpub.png" alt="setpub.png" title="setpub"></p><p>重新生成静态文件，删除不需要的旧的生成目录，重新提交github。再次通过域名访问，就能看到效果了。</p><h3 id="5，主题配置和hexo深入配置"><a href="#5，主题配置和hexo深入配置" class="headerlink" title="5，主题配置和hexo深入配置"></a>5，主题配置和hexo深入配置</h3><p>主题配置，想复用别人的主题很简单，以我使用的主题hexo-theme-matery为例，<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a> 打开hexo-theme-matery项目地址，里面有详细的配置方式，其他开源主题可以自己搜索获得。由于hexo-theme-matery中文文档比较详细，这里就不再赘余了。</p><p>hexo的深入配置也可以参考 <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> 文档，根据自己的需求自定义配置。</p><p>到此，hexo+GitHub 搭建博客 算是完成了。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
