<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线上OOM分析 2/119</title>
      <link href="/2021/11/19/midoom/"/>
      <url>/2021/11/19/midoom/</url>
      
        <content type="html"><![CDATA[<h2 id="记一次mybatis引起的线上OOM"><a href="#记一次mybatis引起的线上OOM" class="headerlink" title="记一次mybatis引起的线上OOM"></a>记一次mybatis引起的线上OOM</h2><p>最近在忙着加班+找房换租的窝，所有很久没写博客，社畜的艰苦生活，哈哈</p><p>言归正传，最近线上一个小项目，出现了特殊的OOM情况，很有意思，所以跟大家分享一下</p><h3 id="奇特的内存溢出现象"><a href="#奇特的内存溢出现象" class="headerlink" title="奇特的内存溢出现象"></a>奇特的内存溢出现象</h3><h4 id="项目背景："><a href="#项目背景：" class="headerlink" title="项目背景："></a>项目背景：</h4><p>公司有某个线下零售业务部门，有POS一千台左右，业务和门店还在持续扩张中。业务现有的CRM和POS修改起来较为困难(全为供应商标准系统)。<br>业务有个中间件，用于接受POS的一个结账前的会员信息请求，转发到SRM系统获取基础信息后，然后查数据库表做数据加工后再返回POS，以此来做双方系统的自定义配置。(个人不认可这种方案)<br>这个小项目是由我们组的一个小伙伴完成开发，压测完成后部署在阿里云上，2台ECS做了负载均衡。</p><h4 id="溢出现场"><a href="#溢出现场" class="headerlink" title="溢出现场:"></a>溢出现场:</h4><p>项目上线后，间隔一段时间后，用户反馈POS有些门店请求报错。上服务器查询日志发现报了内存溢出，项目已经被守护进程自动重启，无法查看溢出时内存具体成分。查看代码报错，是请求导致的OOM报错。结合之前的日志分析发现，崩溃前已经发生多次内存无法回收的异常。查看ECS的监控，发现内存是缓慢上升的。断定发生了内存泄漏。<br>监控了一段时间后，发现被重启后应用，内存依旧在缓慢上升。并发高发时间段是在晚上7-8点，而内存溢出发生在晚上9点多。所以也并不是并发引起的。思考这种内存无法释放的缓慢OOM，单靠增加内存或者JVM调优是很难解决的，应该是小伙伴的代码中有对象没有及时释放导致的，此时已经晚上十点多，门店已经关店，无法观察内存变化，而且之前压测也没有出现OOM。考虑有可能需要长压测来让内存缓慢累计，所有起了压测程序，参数并发调低，压测时间改为连续3小时。等待明早观察成果。</p><h3 id="坚信的问题定位"><a href="#坚信的问题定位" class="headerlink" title="坚信的问题定位"></a>坚信的问题定位</h3><p>[加班太多，暂空]</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>119行动</title>
      <link href="/2021/11/09/hello-world/"/>
      <url>/2021/11/09/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>我打算开始写博客，今天是2021年11月9号。我称之为119行动。</p><p>119，一方面因为今天是11月9号开始时间，另一方面也表示这个事情对我像火灾一样比较紧迫。</p><p>github是我主发的地方，抽空会将文章同步到个人公众号、CSDN等等各个平台。</p><p>119行动的内容包含：<br>1，每周写一篇博客。<br>2，至少每2天跑一次3公里。<br>3，每天做一道code题目。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo+GitHub 搭建博客 1/119</title>
      <link href="/2021/11/09/hexo/"/>
      <url>/2021/11/09/hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-GitHub-搭建博客"><a href="#hexo-GitHub-搭建博客" class="headerlink" title="hexo+GitHub 搭建博客"></a>hexo+GitHub 搭建博客</h2><p>基础环境：nodejs</p><p><em>本文用使用示例是github，同样的操作也可用于gitee，但我在实际操作的过程中发现gitee需要实名手持身份证拍照审核，觉得麻烦随之放弃</em></p><h3 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1, 新建仓库"></a>1, 新建仓库</h3><p>github上新建代码仓库，用来存储博客</p><p><img src="/images/githubNewKu.png" alt="githubNewKu.png" title="githubNew"></p><p>注意，项目名字使用 你的github名字加 <font color="red">.github.io</font> 后缀，比如我的GitHub名称是<a href="https://github.com/liu-xiaoran">liu-xiaoran</a>,n那么我的项目名字就是 liu-xiaoran.github.io 点击创建完成操作，注意不要勾选add Readme file 和其他选项，这个可以后续自行添加，空白的仓库库有助于git的第一次推送合并。</p><h3 id="2-配置博客访问"><a href="#2-配置博客访问" class="headerlink" title="2, 配置博客访问"></a>2, 配置博客访问</h3><p>跳转到刚刚新建仓库首页，也厚点击上方菜单栏的<font color="pink">Settings</font>,再点击左边栏位的<font color="pink">Pages</font>, 填写对应的pages设置。</p><p><img src="/images/setPage.png" alt="setPage.png" title="setPage"></p><p>Source 那里默认是 root, 点击选择Theme Chooser，选择一个主体，点击保存。<br>此时你通过填写的仓库名，如 liu-xiaoran.github.io 就可以访问到该博客地址。</p><h3 id="3-配置域名访问"><a href="#3-配置域名访问" class="headerlink" title="3, 配置域名访问"></a>3, 配置域名访问</h3><p>配置域名访问和配置https的方式，打开你的域名解析控制台，如我的阿里云域名配置页面。<br><img src="/images/DNS.png" alt="DNS.png" title="DNS"></p><p>配置CNAME，指向你的博客访问地址，如liu-xiaoran.github.io。</p><p>配置结束后，返回github的pages配置页面，填写上域名，自动生成CNAME文件，勾选启用https。保存后稍后即可使用域名访问博客。想使用GitHub自动博客功能的，到此处就可以结束了。</p><h3 id="3-安装使用hexo"><a href="#3-安装使用hexo" class="headerlink" title="3, 安装使用hexo"></a>3, 安装使用hexo</h3><p>打开终端输入</p><p><code>npm i hexo-cli -g</code></p><p>安装hexo, 拉取我们的github上的博客库，到本地。清空内部GitHub博客配置的文件。在文件夹内使用终端，输入</p><p><code>hexo init</code></p><p>初始化文件夹，接着使用 <code>npm i</code> 安装依赖。</p><p>这样hexo博客就配置好了，输入 <code>hexo g</code> 生成静态网页，然后输入 <code>hexo s</code> 打开本地服务器。可以写一个hello本地尝试一下。</p><h3 id="4，配置GitHub默认路径"><a href="#4，配置GitHub默认路径" class="headerlink" title="4，配置GitHub默认路径"></a>4，配置GitHub默认路径</h3><p>本地写完博文，推送到github时，发现通过域名访问的并不去hexo博客地址，怎么办？<br>仔细看我的步骤2里的红框内的，GitHub上的默认博客根目录是固定，只有几个值可以选择，这里选择一个自己喜欢的值，不是root,比如我选的 <font color="pink">docs</font> , 打开自己的hexo配置，_config.yml 将里面的public_dir值改成和GitHub选择的值一致，比如我的都是 <font color="pink">docs</font> 。</p><p><img src="/images/setpub.png" alt="setpub.png" title="setpub"></p><p>重新生成静态文件，删除不需要的旧的生成目录，重新提交github。再次通过域名访问，就能看到效果了。</p><h3 id="5，主题配置和hexo深入配置"><a href="#5，主题配置和hexo深入配置" class="headerlink" title="5，主题配置和hexo深入配置"></a>5，主题配置和hexo深入配置</h3><p>主题配置，想复用别人的主题很简单，以我使用的主题hexo-theme-matery为例，<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a> 打开hexo-theme-matery项目地址，里面有详细的配置方式，其他开源主题可以自己搜索获得。由于hexo-theme-matery中文文档比较详细，这里就不再赘余了。</p><p>hexo的深入配置也可以参考 <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> 文档，根据自己的需求自定义配置。</p><p>到此，hexo+GitHub 搭建博客 算是完成了。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
